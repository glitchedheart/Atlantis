<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// default values

enum FireMode
{
    noFire,
    canFire,
    isFiring,
    fireDone
}

// values used for the ship's y values
shipYValues[0] = 60.0
shipYValues[1] = 128.0
shipYValues[2] = 186.0
shipYValues[3] = 250.0
shipYValues[4] = 560.0

// the ship's starting X position
startXPos = 0.0;

// which level is this ship at
currentLevel = 0;

shipWorth = 0;

// firing information
fireMode = FireMode.noFire;
laserObject = noone;

// how fast is this ship traveling?
var gameManager = GetSingleton(GameManager);
shipSpeed = gameManager.currentShipSpeed;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// kill the laser
instance_destroy(laserObject);
laserObject = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// movement

// update movement
x += shipSpeed;

// has the ship gone off the screen
if (x &lt; -40.0) || (x &gt; room_width + 40.0)
{
    // increment the level
    currentLevel += 1;

    // move down to the next level
    y = shipYValues[currentLevel];
    x = startXPos;
    
    // if this ship has gone through all the levels, get rid of the ship    
    if (currentLevel == 4) 
    {
        ShipDestroyed(noone);
     
        // destroy this ship
        instance_destroy();
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// firing

// check if we are on the lower level and not currently firing
if (currentLevel == 3) &amp;&amp; (fireMode == FireMode.noFire)
{
    // get the gamemanager
    var gameManager = GetSingleton(GameManager);
    // if this isn't in attract mode, firing is ok
    if (!gameManager.isAttractMode) {
        fireMode = FireMode.canFire;
    }
}

// if we can fire, spawn the laser
if (fireMode == FireMode.canFire)
{
    // get the index of the structure to target
    var index = getIndexForLaser();
    
    laserObject = instance_create(x,y,oLaser);
    with laserObject
    {
        powerLevel = index;
    }
    
    fireMode = FireMode.isFiring;
    
    // play the laser sound
    audio_play_sound(snd_laser, 10, true);
}
// if we are firing, move the laser along
else if (fireMode == FireMode.isFiring)
{
    if (laserObject != noone)
    {
        laserObject.x = x;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// collision with player bullet

instance_change(oShipExplosion,true);

// let the gameManager know that the ship was destroyed 
ShipDestroyed(self);

if (fireMode == FireMode.isFiring)
{
    audio_stop_sound(snd_laser);
    fireMode = FireMode.noFire;
}

// destroy the bullet   
with (other)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// kill the laser
// if this ship is currently firing, kill the laser sound when it is destroyed
if (fireMode == FireMode.isFiring)
{
    audio_stop_sound(snd_laser);
    fireMode = FireMode.noFire;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
