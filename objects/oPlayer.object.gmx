<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// player code

enum Cannon
{
    None,
    Center,
    Left,
    Right
}

// firing
fireDelay = 20 
canFire = true
whichCannon = Cannon.Center

// structureLiveArray - keeps track of which structures are alive
structureLiveArray[0] = 1;
structureLiveArray[1] = 1;
structureLiveArray[2] = 1;
structureLiveArray[3] = 1;
structureLiveArray[4] = 1;
structureLiveArray[5] = 1;
structureLiveArray[6] = 1;

// controller info
curPlayerIndex = 0;
deadzone = 0.20;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// fire delay
canFire = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// step

// is the game over?
if (isGameOver())
{
    room_goto(endGame);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// user input

// get the input of the controller
var lxAxis = gamepad_axis_value(curPlayerIndex, gp_axislh);

var directionPressed = Cannon.None;

// if the center cannon is alive
if (structureLiveArray[0] == 1)
{
    directionPressed = Cannon.Center;
}

if keyboard_check(vk_left) || (lxAxis &gt; deadzone)
{
    directionPressed = Cannon.Left
}
else if keyboard_check(vk_right) || (lxAxis &lt; -deadzone)
{
    directionPressed = Cannon.Right
}

if (keyboard_check_pressed(vk_space) || (gamepad_button_check_pressed(0, gp_face1))) &amp;&amp; (directionPressed != Cannon.None)
{
    // if the fire delay hasn't expired, return
    if (canFire)
    {    
        var bullet = noone;

        // play the fire sound
        audio_play_sound(snd_fire, 10, false);
        switch (directionPressed)
        {
            case Cannon.Center:
                bullet = instance_create(mainCannonX, mainCannonY, oBullet);
                with (bullet)
                {
                    motion_set(90, 10);
                }
            break;
        
            case Cannon.Left:
                bullet = instance_create(leftCannonX, leftCannonY, oBullet);
                with (bullet)
                {
                    motion_set(25, 10);
                }
            break;
        
            case Cannon.Right:
                bullet = instance_create(rightCannonX, rightCannonY, oBullet);
                with (bullet)
                {
                    motion_set(160, 10);
                }
            break;
        }
    
        // reset the firedelay
        canFire = false;
        alarm[0] = fireDelay;    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
