<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init

// DEBUG TOOLS
show_debug_overlay(true);

display_set_gui_size(966, 544);

// are we in attract mode?
isAttractMode = false;

enum WaveMode
{
    waveNOP,
    waveStart,
    waveActive,
    waveOver
}

// enemy speed
startShipSpeed = 0;
maxShipSpeed = 0;
speedIncrement = 0;
currentShipSpeed = 0;

// wave counters
maxShipsForWave = 0;
numSpawnedShips = 0;
numDestroyedShips = 0;

//ship spawning
spawnTimer = 0;
shouldSpawnShip = false;

// reset and start a new game
ResetNewGame(self);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// spawn next ship
SpawnNextShip();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// start next wave

currentWaveMode = WaveMode.waveStart;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wave management

// start a new wave
if (currentWaveMode == WaveMode.waveStart)
{
    // how many ships for this wave
    maxShipsForWave = irandom_range(9,13);
    numSpawnedShips = 0;
    numDestroyedShips = 0;

    // increment speed in gamemode, leave alone in attract
    if (!isAttractMode) {
        // ship speed for this wave
        currentShipSpeed += speedIncrement;
    }
    
    // bool to determine if ship should spawn
    shouldSpawnShip = true;
    // start the spawntimer
    spawnTimer = 1000/currentShipSpeed;
    
    currentWaveMode = WaveMode.waveActive;
    
    // play the background noise if it's not already playing
    if (!sound_isplaying(snd_backgroundnoise)) &amp;&amp; (!isAttractMode)
    {
        audio_play_sound(snd_backgroundnoise, 5, true);
    }
}
else if (currentWaveMode == WaveMode.waveActive)
{
    // can we spawn another ship?
    if (numSpawnedShips &lt; maxShipsForWave)
    {
        if (shouldSpawnShip)
        {
            // if we should spawn, set the timer for the next ship
            alarm[1] = spawnTimer;
            
            CreateShip();
    
            numSpawnedShips += 1;
            shouldSpawnShip = false;
        }
    }
    // is the wave over?
    if (numDestroyedShips &gt;= maxShipsForWave)
    {
        currentWaveMode = WaveMode.waveOver;
    }
}
// wave is over
else if (currentWaveMode == WaveMode.waveOver)
{
    // stop all sounds
    audio_stop_all();
    
    // play the waveend sound
    audio_play_sound(snd_waveend, 10, false);
    
    // if the main cannon isn't alive, respawn it
    if (!isMainCannonAlive())
    {
        regenMainCannon();
    }
    
    // start the timer to start the next wave
    alarm[0] = 150;
    
    // sit in NOP mode until timer expires
    currentWaveMode = WaveMode.waveNOP;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw score

draw_set_colour(c_yellow);
draw_set_font(TechnoFont);
draw_text(400, 500, string(currentScore));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
